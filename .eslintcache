[{"/Users/kancravi@us.ibm.com/MyWork/infinitescroll/src/App.js":"1","/Users/kancravi@us.ibm.com/MyWork/infinitescroll/src/useBooksSearch.js":"2","/Users/kancravi@us.ibm.com/MyWork/infinitescroll/src/index.js":"3","/Users/kancravi@us.ibm.com/MyWork/infinitescroll/src/Search/index.js":"4"},{"size":2957,"mtime":1608714895304,"results":"5","hashOfConfig":"6"},{"size":1022,"mtime":1608707691524,"results":"7","hashOfConfig":"6"},{"size":244,"mtime":1608710168291,"results":"8","hashOfConfig":"6"},{"size":380,"mtime":1608712023411,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1imx2a3",{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/kancravi@us.ibm.com/MyWork/infinitescroll/src/App.js",[],"/Users/kancravi@us.ibm.com/MyWork/infinitescroll/src/useBooksSearch.js",["19"],"import { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nconst URL = 'http://openlibrary.org/search.json';\n\nexport default function useBooksSearch (query,pageNumber) {\n\tconst [books,setBooks] = useState([]);\n\tconst [loading, setLoading] = useState(false);\n\tconst [error, setError] = useState(false);\n\tconst [hasMore,setHasMore] = useState(true);\n\tlet cancel\n\n\tuseEffect(() => {\n\t\tsetBooks([])\n\t},[query])\n\n\tuseEffect(() => {\n\t\tsetLoading(true);\n\t\tsetError(false);\n\t\taxios({\n\t\t\tmethod: 'GET',\n\t\t\turl: URL,\n\t\t\tparams: {q: query, page: pageNumber},\n\t\t\tcancelToken: new axios.CancelToken(c => cancel = c)\n\t\t}).then(response => {\n\t\t\tconsole.log(response.data.docs);\n\t\t\tsetLoading(false);\n\t\t\tsetBooks((prevBooks) => {\n\t\t\t\treturn [...new Set([...prevBooks, ...response.data.docs])]\n\t\t\t})\n\t\t\tsetHasMore(response.data.docs.length > 0)\n\t\t}).catch(err => {\n\t\t\tif(axios.isCancel(err)) return\n\t\t\tsetError(true)\n\t\t})\n\t\treturn () => cancel();\n\t},[query,pageNumber])\n\n\treturn {\n\t\tbooks,\n\t\tloading,\n\t\terror,\n\t\thasMore\n\t};\n}","/Users/kancravi@us.ibm.com/MyWork/infinitescroll/src/index.js",[],"/Users/kancravi@us.ibm.com/MyWork/infinitescroll/src/Search/index.js",[],{"ruleId":"20","severity":1,"message":"21","line":24,"column":53,"nodeType":"22","endLine":24,"endColumn":54},"react-hooks/exhaustive-deps","Assignments to the 'cancel' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Identifier"]